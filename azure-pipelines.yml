name: CI

trigger:
  - main
  - develop

variables:
  CI: 'true'
  npm_config_cache: $(Pipeline.Workspace)/.npm
  ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    NX_BRANCH: $(System.PullRequest.PullRequestNumber)
    TARGET_BRANCH: $[replace(variables['System.PullRequest.TargetBranch'],'refs/heads/','origin/')]
    BASE_SHA: $(git merge-base $(TARGET_BRANCH) HEAD)
  ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
    NX_BRANCH: $(Build.SourceBranchName)
    BASE_SHA: $(git rev-parse HEAD~1)
  HEAD_SHA: $(git rev-parse HEAD)

stages:
  - stage: Test
    jobs:
      - job: UnitTests
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(npm_config_cache)
          - script: npm ci
          - script: npx nx run-many --target=test --all --parallel
            displayName: 'Run Unit Tests'
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/junit.xml'
          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '**/coverage/cobertura-coverage.xml'

      - job: IntegrationTests
        pool:
          vmImage: 'ubuntu-latest'
        services:
          mongodb: mongodb
          azurite: mcr.microsoft.com/azure-storage/azurite
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
          - script: npm ci
          - script: npx nx e2e training-insights-api-e2e
            env:
              MONGODB_URL: mongodb://localhost:27017/test
              STORAGE_CONNECTION_STRING: DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://localhost:10000/devstoreaccount1;

      - job: E2ETests
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
          - script: npm ci
          - script: docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
          - script: npx nx e2e training-insights-e2e --configuration=ci
            env:
              CI: 'true'
          - task: PublishPipelineArtifact@1
            condition: always()
            inputs:
              targetPath: playwright-report
              artifact: 'playwright-report'
          - script: docker-compose down
            condition: always()

  - stage: Build
    dependsOn: Test
    condition: succeeded()
    jobs:
      - job: BuildApps
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
          - script: npm ci
          - script: npx nx affected --target=build --prod --parallel
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: dist
              artifact: 'build'

  - stage: Deploy
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployToStaging
        environment: staging
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: 'build'
                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: '$(AZURE_SUBSCRIPTION)'
                    appName: '$(APP_NAME)'
                    package: '$(Pipeline.Workspace)/build'
